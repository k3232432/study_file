%%%%% 일단 이력서에 적어놓은 기술적인 부분은 다 알고 있어야함 %%%%%%%%%%%%%%%%%

1. 클라우드란
-----------------------------------
대답 : 물리적인 서버가 없이도 인터넷에 접속하여 다양한 자원을 사용할 수 
있게 하는 컴퓨터 리소스 이용형태를 말합니다.

2. 물리서버와 클라우드 서버의 특징
-----------------------------------------
소유자와 사용자가 다르다는 것이 가장 큰 특징입니다.
물리서버의 경우 일반적으로 기업이 서버를 소유하고 있습니다.
반면 AWS는 Amazon 이 모든 리소스를 소유하고, 해당 리소스를 서비스로 만든 것을
사용하는 형태입니다.

3. 렌탈 서버의 3가지 형태
--------------------------------------
-공용서버 : 1개의 물리서버를 분할 한 형태, 다른 사용자의 영향을 받을수 있음
-전용서버 : 1대의 물리서버를 점유하는 형태, 다른 사용자의 영향을 받지 않으나 비쌈
-가상전용서버 : 1대의 물리서버 위에 있는 가상서버를 점유

4. 렌탈서버와 AWS차이
-------------------------------------------
 AWS는 가상전용서버와 비슷한 형태를 갖고 있습니다.
하지만 AWS에서는 디스크 동적 추가, instance type 변경,가상머신 생성 및 백업, 복제
등 다양한 기능을 제공합니다.

5.Public Cloud  와 Private Cloud의 차이는 무엇인가요
---------------------------------------------
누구에게 서비스를 제공하느냐에 대한 차이가 있습니다.
public 은 불특정 다수에게 제공하며, private 는 특정 기업에 제공하는 형태 입니다.
이 외에도 Public Cloud 와 Private Cloud 를 조합한 하이브리드 클라우드, 특정 업종의
기업들이 함께 운영하는 커뮤니티 클라우드의 형태도 있습니다.

6. AWS에서의 private cloud 의 의미는?
-----------------------------------------------
vpc를 이용하여 논리적으로 분리된 가상의 네트워크 환경을 생성하는 것을 뜻합니다.
기존 물리서버와 (on-premise)동일한 네트워크 구성이 가능합니다.

7. 스케일 아웃, 과 스케일 업 의 차이를 설명하라.
-----------------------------------------------------
스케일 아웃이란 서버를 여러대 추가하여 시스템을 확장하는 방법 입니다.
서버가 여러대가 되기 때문에 각 서버에 걸리는 부하를 균등하게 해주는 로드밸런싱이
필수적으로 동반되어야 합니다. 장점은 서버 1대가 다운되더라도 다른 서버로 서비스 제공이 가능합니다.
단점은 모든 서버가 동일한 데이터를 가지고 있어야 한다는 점으로, 데이터 변화자 적은 웹서버에 적합한 방식입니다.

스케일 업이란 서버에 cpu나 ram등을 추가하거나 부품등을 서버로 교환하는 방법을 의미합니다.
서버에 추가 부품을 장착할 수 있는 여유 슬롯이 있어야 하며, 그렇지 않은경우 서버 자체를 고성능으로 교체해야합니다.
장점으로는 한대의 서버에 모든 데이터를 처리하므로 데이터 갱신이 빈번하게 일어납니다. 
단점으로는 서버 한대에 모든 부하가 집중되므로 장애시 영향을 크게 받을수 있는 위험성이 있습니다.

8. MSA 의 개념을 설명하라
---------------------------------
MSA는 Micro Service Architecture 로서 전체 어플리케이션을 특정 목적을 가진
어플리 케이션 단위로 나누는 것입니다. 나누어진 어플리케이션으로 독립된 서비스를
제공하더라도 문제가 없어야 한다는것을 의미합니다.

9. MSA의 장점은 무엇인가? 기존 방식에 비해 어떤 이점을 가질수 있는가?
그리고 그에따른 단점이나 리스크가 있는가?
-------------------------------------------------
MSA는 서비스 단위를 독립적으로 배포가 가능하며, 한 micro service 가 실패하면 다른
micro service 가 계속해서 기능을 수행 할 수 있으며, 서비스별로 서로 다른 언어 구현이
가능하다는 장점이 있습니다.

 하지만, 어플리케이션의 숫자가 많아지고, 복잡해 질 수록 테스트가 어려워지며, 각각의
어플리케이션에 대한 에러처리가 필요합니다. 또한 배포에 대한 자동화가 필수요소로 
들어가며 각각의 어플리케이션에서 데이터 무결성을 책임지지 못한다는 단점이 있습니다.



10. 컨테이너를 위한 운영 환경에는 어떠한 것들이 있는가? 가장많이 사용되는 것은 무엇인가?
-------------------------------------------------------------
운영환경에는 쿠버네티스, 도커 가있으며 가장많이사용되는것은 둘다 많이 사용되고 있습니다.

11. 쿠버네티스가 가장 선호되는 이유가 무엇이라고 생각 하는가?
--------------------------------------------------------------------
애플리케이션 배포, 개발을 단순화 해주며, 컴퓨팅 리소스를 활용하고 지속적인 상태 확인
과 셀프 힐링해주며, AutoScaling 을 통해 부하를 분산시켜 주는 이점을 가져
가장 많이 사용된다고 생각합니다.

12. 쿠버네티스 클러스터의 기본 아키텍처에 대해 설명하라
------------------------------------------------------------------
쿠버네티스 클러스터는 크게 2가지 종류로 구성됩니다.
클러스터를 관리하는 역활을 하는 마스터(master)와 
실제 컨테이너를 실행시키는 작업을 하는 노드(node)입니다.


13. 모니터링 툴을 사용해본 적이 있는가? 있다면 그에 관해 설명하라.
---------------------------------------------------------------------
CloudWatch는 애플리케이션을 모니터링하고, 시스템 전반의 성능 변경 사항에 대응하며, 
리소스 사용률을 최적화합니다. 로그, 지표 및 이벤트 형태로 모니터링 및 운영 데이터를 
수집하여 리소스, 애플리케이션 및 서비스에 대한 통합된 보기를 제공합니다.
 환경에서 이상 동작을 감지하며,경보를 설정하고, 로그와 지표를 나란히 시각화하며,
 자동화된 작업을 수행하고, 문제를 해결하며, 애플리케이션을 원활하게 실행할 수 있습니다.

14. 쿠버네티스에서 Auto Scaling의 원리에 대해 설명하라
--------------------------------------------------------------------
쿠버네티스에는 HPA 또는 VPA를 사용하여 auto scaling 을 진행하는데 
VPA는 2가지의 모드가 존재 합니다.
첫번째 auto 모드는  pod 의 리소스 사용량을 일정 주기 이상 모니터링 한 후에
 그 metric 을 기반으로 pod resource의 request 값을 변경해주는 방식입니다.
두번째는 manual 모드입니다. 메뉴얼 모드로  pod를 운영하면 vpa가 직접 
request 내용을 변경하지 않고, 적절하게 필요한 request양을 추천해 줍니다. 

HPA 는 pod 에서 메트릭을 메트릭 서버에 저장합니다. cpu나 memory 와 같은 리소스
지표를 확인하고 지정해놓은 임계점을 지나면 pod의 수를 늘려서 스케일링 합니다.

최근에 CA 가 나오게 되었는데 CA node의 수를 조정합니다. 퍼블릭 클라우드와 
연동해서 동작하도록 되어 있고, 각 서비스마다 동작방식에 다소 차이가 있습니다.
기본적인 동작 방법은 pod를 생성할 때, node들의 리소스가 부족해서
pod를 생성할 수 없으면, pod 들은 panding 상태로 대기하게 됩니다. 이때 CA가
감지하게 되면 node의 수를 늘리도록 합니다. 보통 10초단위로 panding상태인지
pod들을 확인합니다.
※ 쿠버네티스는 약어로 K8S 라고 한다.
※ (쿠버네티스)HPA 란 Horizontal Pod Autoscaler로서 cpu사용량 을 관찰해서 자동으로 스케일 하는것
※ (쿠버네티스)VPA란 Vertical Pod Autoscaler 로서 cpu사용량을 관찰해서 자동으로 스케일 하는것
※ (쿠버네티스)CA란 Cloud Autoscaler로서 pod의 상태를 확인하고 node의 수를 늘려줌으로 스케일함